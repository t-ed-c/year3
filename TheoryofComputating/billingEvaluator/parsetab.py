
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN COLON COMMA DIVIDE EQ GE GT ID LE LPAREN LT MINUS NE NOT NUMBER OR PLUS QUESTION RPAREN TIMESstatement : ID ASSIGN expressionstatement : expressionexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression GT expression\n| expression LT expression\n| expression GE expression\n| expression LE expression\n| expression EQ expression\n| expression NE expression\n| expression AND expression\n| expression OR expressionexpression : expression QUESTION expression COLON expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDexpression : NOT expressionexpression : ID LPAREN expression RPARENexpression : ID LPAREN RPAREN'
    
_lr_action_items = {'ID':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,],[2,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'LPAREN':([0,2,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,43,],[4,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,4,]),'NUMBER':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NOT':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,5,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,44,],[0,-18,-2,-17,-18,-19,-1,-21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,-20,-15,]),'ASSIGN':([2,],[7,]),'PLUS':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,9,-17,9,-18,9,9,9,-21,9,9,9,9,9,9,9,9,9,9,9,9,9,-16,-20,9,]),'MINUS':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,10,-17,10,-18,10,10,10,-21,10,10,10,10,10,10,10,10,10,10,10,10,10,-16,-20,10,]),'TIMES':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,11,-17,11,-18,11,11,11,-21,11,11,11,11,11,11,11,11,11,11,11,11,11,-16,-20,11,]),'DIVIDE':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,12,-17,12,-18,12,12,12,-21,12,12,12,12,12,12,12,12,12,12,12,12,12,-16,-20,12,]),'GT':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,13,-17,13,-18,13,13,13,-21,13,13,13,13,13,13,13,13,13,13,13,13,13,-16,-20,13,]),'LT':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,14,-17,14,-18,14,14,14,-21,14,14,14,14,14,14,14,14,14,14,14,14,14,-16,-20,14,]),'GE':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,15,-17,15,-18,15,15,15,-21,15,15,15,15,15,15,15,15,15,15,15,15,15,-16,-20,15,]),'LE':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,16,-17,16,-18,16,16,16,-21,16,16,16,16,16,16,16,16,16,16,16,16,16,-16,-20,16,]),'EQ':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,17,-17,17,-18,17,17,17,-21,17,17,17,17,17,17,17,17,17,17,17,17,17,-16,-20,17,]),'NE':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,18,-17,18,-18,18,18,18,-21,18,18,18,18,18,18,18,18,18,18,18,18,18,-16,-20,18,]),'AND':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,19,-17,19,-18,19,19,19,-21,19,19,19,19,19,19,19,19,19,19,19,19,19,-16,-20,19,]),'OR':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,20,-17,20,-18,20,20,20,-21,20,20,20,20,20,20,20,20,20,20,20,20,20,-16,-20,20,]),'QUESTION':([2,3,5,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-18,21,-17,21,-18,21,21,21,-21,21,21,21,21,21,21,21,21,21,21,21,21,21,-16,-20,21,]),'RPAREN':([5,8,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,44,],[-17,27,41,-18,-19,42,-21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-16,-20,-15,]),'COLON':([5,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-17,-18,-19,-21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,43,-16,-20,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,43,],[3,22,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID ASSIGN expression','statement',3,'p_statement_assign','parser.py',23),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',31),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',36),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',37),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',38),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',39),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',40),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',41),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',42),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',43),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',44),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',45),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',46),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',47),
  ('expression -> expression QUESTION expression COLON expression','expression',5,'p_expression_ternary','parser.py',55),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',64),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',68),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',73),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',79),
  ('expression -> ID LPAREN expression RPAREN','expression',4,'p_expression_function_call','parser.py',86),
  ('expression -> ID LPAREN RPAREN','expression',3,'p_expression_function_call_no_args','parser.py',103),
]
